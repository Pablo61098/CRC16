/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crc16;

import java.util.Arrays;

//Tiempo para una trama de 1024 bytes, haciendo crc y detectando error es 6 segundos con 63 centesimas
//Quitando los println() ya no dura nada,

public class CRC16 {

//private final static String divisor = "10001000000100001";    
//private final static String divisor = "11000000000000101";
private final static String divisor = "10001000000100001"; //divisor  CRC-16-IBM  RAZON DE USO: https://en.wikipedia.org/wiki/Cyclic_redundancy_check#Computation_of_CRC
private static int longitudDivisor;    


public static void main(String... a) {
    //String bitsMandar = "010010000110100100100001";
    String bitsMandar
    
    
    
    
    String bitsMandar
    //0000000000000000
    
    
    CRC16 crc = new CRC16();
    int[] hola = crc.getDividendoArrayFromString(bitsMandar, longitudDivisor);
    System.out.print("\n");
    int[] hola2 = crc.getDivisorArrayFromString(divisor, 0);
    byte[] hola3 = crc.calculate_crc(hola, hola2);
    
    System.out.println("\n\nSALTOOOOOOOOOOOOOO\n\n");
    boolean error_O_No = detectarError( bitsMandar2 , hola3);
    System.out.println("Se ha detectado error: " + error_O_No);
    
} 


public CRC16(){
    this.longitudDivisor = this.divisor.length();
}

public static int[] getDividendoArrayFromString(String dividendoString, int offset){
    
    char[] arrayBits = dividendoString.toCharArray();
    int[] exponentes = new int[arrayBits.length];
    int longitud = arrayBits.length;
    
    for(int i=0; i<arrayBits.length; i++){
        if(String.valueOf(arrayBits[i]).equals("1")){
            exponentes[i] = (longitud+offset) - (i+2);
        }else if(i==arrayBits.length){
            
        }else{
            exponentes[i] = -1;
        }
        
    }
    /*
    System.out.print(" \n ");
    for(int i=0; i<exponentes.length; i++){
        System.out.print(" $ " + exponentes[i] + " $ ");
    }
    System.out.print(" \n ");
    */
    return exponentes;
    
}

public static int[] getDividendoArrayFromString2(String dividendoString, int offset){
    
    char[] arrayBits = dividendoString.toCharArray();
    int[] exponentes = new int[arrayBits.length];
    int longitud = arrayBits.length;
    
    for(int i=0; i<arrayBits.length; i++){
        if(String.valueOf(arrayBits[i]).equals("1")){
            exponentes[i] = (longitud+offset) - (i);
        }else if(i==arrayBits.length){
            
        }else{
            exponentes[i] = -1;
        }
        
    }
    /*
    System.out.print(" \n ");
    for(int i=0; i<exponentes.length; i++){
        System.out.print(" $ " + exponentes[i] + " $ ");
    }
    System.out.print(" \n ");
    */
    
    return exponentes;
    
}

public static int[] getDivisorArrayFromString(String dividendoString, int offset){
    
    char[] arrayBits = dividendoString.toCharArray();
    int[] exponentes = new int[arrayBits.length];
    int longitud = arrayBits.length;
    
    for(int i=0; i<arrayBits.length; i++){
        if(String.valueOf(arrayBits[i]).equals("1")){
            exponentes[i] = (longitud+offset) - (i+1);
        }else if(i==arrayBits.length){
            
        }else{
            exponentes[i] = -1;
        }
        
    }
    /*
    for(int i=0; i<exponentes.length; i++){
        System.out.print(" $ " + exponentes[i] + " $ ");
    }
    */
    return exponentes;
    
}

byte[] calculate_crc(int[] dividendoOriginal, int[] divisor) {
    
    int[] dividendo = new int[dividendoOriginal.length+this.longitudDivisor-1];
    int[] resultado = new int[dividendoOriginal.length];
    
    
    for(int i=0; i<dividendoOriginal.length;i++){
        dividendo[i] = dividendoOriginal[i];
    }
    for(int i=0; i<divisor.length-1;i++){
        dividendo[i+dividendoOriginal.length] = -1;
    }
    
    /*
    System.out.print("\nLEN:  " + (dividendo.length) + "\n");
    for(int i=0; i<dividendo.length; i++){
            System.out.print(" $ " + dividendo[i] + " $ ");
    }
    System.out.print("\n");
    */
    
    int multiplicador = 1;
    
    int indice = 0;
    while(multiplicador >= 0){
        //System.out.println("HOLA");
        int indiceMayor=0;
        for(int i=0; i<dividendo.length; i++){
            if(dividendo[i]==-1){
            }else{
                indiceMayor = dividendo[i];
                //System.out.println("HOLA: " + indiceMayor);
                break;
            }
        }
        
        //System.out.println("HOLA2: " + divisor[0]);
        
        multiplicador = indiceMayor -  divisor[0];
        if(multiplicador <0){
            break;
        }
//        resultado[multiplicador] = multiplicador;
        
        for(int i=0; i<divisor.length; i++){
            if(divisor[i]!=-1){
                int restador = multiplicador + divisor[i];
                
                /*System.out.println("MULTIPLICADOR: " + multiplicador);
                System.out.println("Divisor: " + divisor[i]);
                System.out.println("Restador: " + restador);
                System.out.println("Restando  : " + dividendo[Math.abs(restador+1-dividendo.length)] + "\n");
                */
                
                if(restador==dividendo[Math.abs(restador+1-dividendo.length)]){
                    /*System.out.println("Restador: " + restador);
                    System.out.println("Restando  : " + dividendo[Math.abs(restador+1-dividendo.length)] + "\n");*/
                    dividendo[Math.abs(restador+1-dividendo.length)] = -1;
                }else{
                    //System.out.println("AAAAA \n");
                    dividendo[Math.abs(restador+1-dividendo.length)] = restador;
                }
            }
        }
        /*
        for(int i=0; i<dividendo.length; i++){
            System.out.print(" $ " + dividendo[i] + " $ ");
        }
        System.out.print("\n");
        */
        
    }
    
    String crc="";
    
    for(int i=dividendo.length-1; i>=0; i--){
        if(i<dividendoOriginal.length){
            //System.out.println("HEY: ");
            break;
        }
        if(dividendo[i]!=-1){
            crc = "1" + crc ;
            //System.out.println("HEY: " + crc);
        }else{
            crc = "0" + crc ;
            //System.out.println("HEY: " + crc);
        }
    }
    
    System.out.println("CRC: " + crc);
    char[] arrayBits = crc.toCharArray();
    byte[] bytes = new byte[crc.length()/8];
    
    
    for(int i=0; i<crc.length()/8; i++){
        String binaryString = "";
        for(int j=0; j<8 ; j++){
            binaryString = binaryString + arrayBits[j+(8*i)];
        }
        //System.out.println("Binary String: " + binaryString);
        byte twosComplement = getByte(binaryString);
        bytes[i] = twosComplement;
        //System.out.println("Complementos dos: " + twosComplement);
    }
    
    return bytes;
}

public byte getByte(String binaryString) 
    { 
        binaryString = turnStrignAround(binaryString);
        char[] arrayBits = binaryString.toCharArray();
        
        int byteEquivalent = 0;
        
        for(int i=0; i<binaryString.length(); i++){
            if(arrayBits[i]=='1'){
                if(i==binaryString.length()-1){
                    byteEquivalent = byteEquivalent - (int)Math.pow(2, i);
                }else{
                    byteEquivalent = byteEquivalent + (int)Math.pow(2, i);
                }
        }
        
    }   
        
    return (byte)byteEquivalent;
}

public String turnStrignAround(String normal){
    StringBuilder turnedAround = new StringBuilder();
        
    for(int i = normal.length() - 1; i >= 0; i--)
    {
        turnedAround.append(normal.charAt(i));
    }

    System.out.println("Reversed string is:");
    System.out.println(turnedAround.toString());
    
    return turnedAround.toString();
    
}


public static boolean detectarError(/*byte[]*/ String mensaje, byte[] crc){
    
   String cadenaMensaje = mensaje /* convertirBytesToString(mensaje) */;
   String cadenaCrc =  convertirBytesToString(crc);
   
   String mensajeCompleto = cadenaMensaje + cadenaCrc;
   String residuo = longDivision(mensajeCompleto);
   
   char[] arrayBits = residuo.toCharArray();
   
   for(int i=0; i< arrayBits.length; i++){
       if(arrayBits[i]=='1'){
           return true;
       }
   }
   
   
   return false;
    
}

public static String longDivision(String mensajeCompleto){
    
    int[] divisorArray = getDivisorArrayFromString(divisor,0);
    int[] dividendoArray = getDividendoArrayFromString2(mensajeCompleto,0);
    
    /*
    System.out.print("\nLEN:  " + (dividendoArray.length) + "\n");
    for(int i=0; i<dividendoArray.length; i++){
            System.out.print(" $ " + dividendoArray[i] + " $ ");
    }
    System.out.print("\n");
    System.out.print("\nLEN:  " + (divisorArray.length) + "\n");
    for(int i=0; i<divisorArray.length; i++){
            System.out.print(" $ " + divisorArray[i] + " $ ");
    }
    System.out.print("\n");
    */
    
    int multiplicador = 1;
    
    int indice = 0;
    while(multiplicador >= 0){
        //System.out.println("HOLA");
        int indiceMayor=0;
        for(int i=0; i<dividendoArray.length; i++){
            if(dividendoArray[i]==-1){
            }else{
                indiceMayor = dividendoArray[i];
                //System.out.println("HOLA: " + indiceMayor);
                break;
            }
        }
        
        //System.out.println("HOLA2: " + divisorArray[0]);
        
        multiplicador = indiceMayor -  divisorArray[0];
        if(multiplicador <=0){
            break;
        }
//        resultado[multiplicador] = multiplicador;
        
        for(int i=0; i<divisorArray.length; i++){
            if(divisorArray[i]!=-1){
                int restador = multiplicador + divisorArray[i];
                /*
                System.out.println("MULTIPLICADOR: " + multiplicador);
                System.out.println("Divisor: " + divisorArray[i]);
                System.out.println("LEN: " + dividendoArray.length);
                System.out.print("\nLEN:  " + (dividendoArray.length) + "\n");
                
                System.out.println("Restador: " + restador);
                System.out.println("Restando  : " + dividendoArray[Math.abs(restador-dividendoArray.length)] + "\n");
                */
                if(restador==dividendoArray[Math.abs(restador-dividendoArray.length)]){
                    /*System.out.println("Restador: " + restador);
                    System.out.println("Restando  : " + dividendoArray[Math.abs(restador-dividendoArray.length)] + "\n");*/
                    dividendoArray[Math.abs(restador-dividendoArray.length)] = -1;
                }else{
                    //System.out.println("AAAAA \n");
                    dividendoArray[Math.abs(restador-dividendoArray.length)] = restador;
                }
            }
        }
        /*
        for(int i=0; i<dividendoArray.length; i++){
            System.out.print(" $ " + dividendoArray[i] + " $ ");
        }
        System.out.print("\n");
        */
        
    }
    
    String residuo="";
    
    for(int i=dividendoArray.length-1; i>=0; i--){
        if(dividendoArray[i]!=-1){
            residuo = "1" + residuo ;
            //System.out.println("RESIDUO: " + residuo);
        }else{
            residuo = "0" + residuo ;
            //System.out.println("RESIDUO: " + residuo);
        }
    }
    
    //System.out.println("RESIDUO: " + residuo);
    
    return residuo;
    
}



public static String convertirBytesToString(byte[] bytesArray){
        
        String tramaTrabajando = "";
        for(int i=0; i <bytesArray.length; i++){
            //System.out.println("Hola: " + bytesArray[i]);
            tramaTrabajando = tramaTrabajando + String.format("%8s", Integer.toBinaryString(bytesArray[i] & 0xFF)).replace(' ', '0');
        }
        
        //System.out.println("Hola 3: " + tramaTrabajando);
        return tramaTrabajando;
}


}